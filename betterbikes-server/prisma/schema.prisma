generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid()) @map("userId")
  email      String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  name       String
  phone      String   @unique
  address    String
  role       Role     @default(USER)
  Profile    Profile?
}

model OAuthUser {
  id             String   @id @default(uuid()) @map("oAuthUserId")
  email          String   @unique
  profile_image  String?
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now())
  name           String
  phone          String?  @unique
  address        String?
  oAuth_provider String
  oAuth_id       String
  role           Role     @default(USER)
  Profile        Profile?
}

model VehiclePost {
  vehicle_post_id     String    @id @default(cuid())
  vehicle_type        String
  vehicle_model       String
  vehicle_number      String
  vehicle_image       String
  vehicle_color       String
  vehicle_price       Float
  vehicle_brand       String
  vehicle_name        String
  vehicle_description String
  vehicle_features    String[]
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now())
  user_id             String?
  user                Profile?  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Booking             Booking[]
  Store               Store?    @relation(fields: [storeStore_id], references: [store_id])
  storeStore_id       String?
}

model Store {
  store_id      String   @id @default(cuid())
  store_name    String
  store_address String
  store_phone   String
  store_email   String
  store_image   String?
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
  user_id       String?
  user          Profile? @relation(fields: [user_id], references: [id], onDelete: Cascade)

  VehiclePost VehiclePost[]
}

model Booking {
  booking_id      String      @id @default(cuid())
  vehicle_post_id String
  vehicle_post    VehiclePost @relation(fields: [vehicle_post_id], references: [vehicle_post_id], onDelete: Cascade)
  user_id         String?
  user            Profile?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at      DateTime    @default(now())
  updated_at      DateTime    @default(now())
  start_date      DateTime
  end_date        DateTime
  total_price     Float
  status          String
}

model Profile {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(USER)

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  oauth_user_id          String?
  oauth_user             OAuthUser?     @relation(fields: [oauth_user_id], references: [id], onDelete: Cascade)
  conversationsInitiated Conversation[] @relation("ProfileOne")
  conversationsReceived  Conversation[] @relation("ProfileTwo")
  VehiclePost            VehiclePost[]
  Booking                Booking[]
  Store                  Store[]

  @@unique([oauth_user_id])
  @@unique([user_id])
}

model Conversation {
  id String @id @default(uuid())

  profileOneId String
  profileOne   Profile @relation("ProfileOne", fields: [profileOneId], references: [id], onDelete: Cascade)

  profileTwoId String
  profileTwo   Profile @relation("ProfileTwo", fields: [profileTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([profileOneId, profileTwoId])
  @@index([profileTwoId])
}

model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  memberId String

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
  STORE
  PROVIDER
}
